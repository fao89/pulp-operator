---

- name: Set web protocol
  set_fact:
    web_protocol: "https"
  when:
    - ingress_tls_secret | length
    - route_tls_secret | length

- name: Set node address for ingress
  set_fact:
    content_origin: "{{ web_protocol }}://{{ hostname }}"
    ansible_api_hostname: "{{ web_protocol }}://{{ hostname }}"
    token_server: "{{ web_protocol }}://{{ hostname }}/token/"
  when:
    - ingress_type|lower == "ingress"
    - hostname is defined

- name: Fail if hostname is not defined when ingress is specified
  fail:
    msg: "The hostname must be specified when using ingress_type {{ ingress_type }}."
  when:
    - ingress_type|lower == "ingress"
    - hostname is not defined

- name: Get Routes List
  k8s_info:
    kind: Route
    namespace: '{{ meta.namespace }}'
    label_selectors:
      - app.kubernetes.io/name: 'nginx'
      - app.kubernetes.io/instance: 'nginx-{{ meta.name }}'
      - app.kubernetes.io/component: webserver
      - app.kubernetes.io/part-of: '{{ deployment_type }}'
      - app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
  register: route_list
  when:
    - is_openshift
    - not ingress_type

- name: DEBUG Routes List
  debug:
    msg: "{{ route_list }}"
  when:
    - is_openshift
    - not ingress_type

- name: Get Ingress List
  k8s_info:
    kind: Ingress
    namespace: '{{ meta.namespace }}'
  register: ingress_list

- name: DEBUG Ingress List
  debug:
    msg: "{{ ingress_list['resources'][0]['spec']['rules'] }}"
  when: ingress_list | length

- name: DEBUGGGGGGG
  debug:
    msg: "{{ ingress_list['resources'][0]['spec']['rules'][0]['host'] }}"
  when: "'{{ meta.name }}-web-svc' in {{ ingress_list['resources'][0]['spec']['rules'] |string }}"

- name: Get URL when Ingress is Route
  block:
    - name: Retrieve route URL
      k8s_info:
        kind: Route
        namespace: '{{ meta.namespace }}'
        name: '{{ meta.name }}'
      register: route_url

    - name: Capture web URL
      set_fact:
        web_url: "https://{{ route_url['resources'][0]['status']['ingress'][0]['host'] }}"

  when: ingress_type | lower == 'route'

- name: Set node address for route
  set_fact:
    content_origin: "{{ web_url }}"
    ansible_api_hostname: "{{ web_url }}"
    token_server: "{{ web_url }}/token/"
  when:
    - ingress_type|lower == "route"

- name: Get node IP when Ingress is Nodeport
  block:
    - name: Retrieve service node port
      k8s_info:
        kind: Service
        namespace: '{{ meta.namespace }}'
        name: '{{ meta.name }}-web-svc'
      register: web_service
      when:
        - nodeport_port is not defined

    - name: Store nodeport from service
      set_fact:
        nodeport_port: "{{ web_service['resources'][0]['spec']['ports'][0]['nodePort'] }}"
      when:
        - nodeport_port is not defined

    - name: DEBUG Show nodeport_port
      debug:
        msg: "{{ nodeport_port }}"

    - name: Retrieve web pod
      k8s_info:
        kind: Pod
        namespace: "{{ meta.namespace }}"
        label_selectors:
          - "app.kubernetes.io/instance = nginx-{{ meta.name }}"
      register: web_pod

    - name: Store node ip from pod ENV
      set_fact:
        node_ip: "{{ web_pod['resources'][0]['status']['hostIP'] }}"

    - name: DEBUG Show node_ip
      debug:
        msg: "{{ node_ip }}"

    - name: Set node address
      set_fact:
        content_origin: "http://{{ node_ip }}:{{ nodeport_port }}"
        ansible_api_hostname: "http://{{ node_ip }}:{{ nodeport_port }}"
        token_server: "http://{{ node_ip }}:{{ nodeport_port }}/token/"

  when:
    - ingress_type | lower == 'nodeport'

- name: Set svc.cluster.local address
  set_fact:
    content_origin: "http://{{ meta.name }}-web-svc.{{ meta.namespace }}.svc.cluster.local:24880"
    ansible_api_hostname: "http://{{ meta.name }}-web-svc.{{ meta.namespace }}.svc.cluster.local:24880"
    token_server: "http://{{ meta.name }}-web-svc.{{ meta.namespace }}.svc.cluster.local:24880/token/"
  when:
    - content_origin is not defined

- name: Set content_origin
  set_fact:
    content_origin_dict: "{ 'content_origin': '{{ content_origin }}', 'ansible_api_hostname': '{{ ansible_api_hostname }}', 'x_pulp_content_host': '{{ content_host }}', 'x_pulp_content_port': '{{ content_port }}' }"

- name: Set token_server and other container default settings
  set_fact:
    token_server_dict: "{ 'token_server': '{{ token_server }}', 'token_auth_disable': 'False', 'token_signature_algorithm': 'ES256','public_key_path': '/etc/pulp/keys/container_auth_public_key.pem', 'private_key_path': '/etc/pulp/keys/container_auth_private_key.pem', 'galaxy_feature_flags': { 'execution_environments': 'True' }  }"
  when: container_token_secret is defined

- name: DEBUG Show content_origin_dict
  debug:
    msg: "{{ content_origin_dict }}"

- name: merge content_origin with settings
  set_fact:
    default_settings: "{{ default_settings|combine(content_origin_dict) }}"
  no_log: true

- name: merge token_server with settings
  set_fact:
    default_settings: "{{ default_settings|combine(token_server_dict) }}"
  no_log: true
  when: container_token_secret is defined

- name: DEBUG Show content_origin
  debug:
    msg: "{{ default_settings.content_origin }}"
